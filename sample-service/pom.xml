<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<artifactId>sample-service</artifactId>
	<packaging>war</packaging>

	<parent>
		<groupId>de.treichels.sample</groupId>
		<artifactId>jaxws-test</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<build>
		<plugins>
			<!-- run war:war goal three times (for dev, qa and prod) with different classifiers -->
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<executions>
					<execution>
						<!-- default-war replaces the default execution -->
						<id>default-war</id>
						<phase>package</phase>
						<goals>
							<goal>war</goal>
						</goals>
						<configuration>
							<!-- add classes jar file as an additional build artifact with classifier "classes" -->
							<attachClasses>true</attachClasses>
							<webResources>
								<webResource>
									<!-- copy resources from env/dev to WEB-INF/classes -->
									<directory>env/dev</directory>
									<targetPath>WEB-INF/classes</targetPath>
								</webResource>
							</webResources>
							<!-- will produce ${project.build.finalName}-dev.war -->
							<classifier>dev</classifier>
							<!-- use a separate build directory to avoid conflicts -->
							<webappDirectory>${project.build.directory}/${project.build.finalName}-dev</webappDirectory>
						</configuration>
					</execution>
					<execution>
						<id>qa</id>
						<phase>package</phase>
						<goals>
							<goal>war</goal>
						</goals>
						<configuration>
							<webResources>
								<webResource>
									<!-- copy resources from env/qa to WEB-INF/classes -->
									<directory>env/qa</directory>
									<targetPath>WEB-INF/classes</targetPath>
								</webResource>
							</webResources>
							<!-- will produce ${project.build.finalName}-qa.war -->
							<classifier>qa</classifier>
							<!-- use a separate build directory to avoid conflicts -->
							<webappDirectory>${project.build.directory}/${project.build.finalName}-qa</webappDirectory>
						</configuration>
					</execution>
					<execution>
						<id>prod</id>
						<phase>package</phase>
						<goals>
							<goal>war</goal>
						</goals>
						<configuration>
							<webResources>
								<webResource>
									<!-- copy resources from env/prod to WEB-INF/classes -->
									<directory>env/prod</directory>
									<targetPath>WEB-INF/classes</targetPath>
								</webResource>
							</webResources>
							<!-- will produce ${project.build.finalName}-prod.war -->
							<classifier>prod</classifier>
							<!-- use a separate build directory to avoid conflicts -->
							<webappDirectory>${project.build.directory}/${project.build.finalName}-prod</webappDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- generate wsdl from source code annotations using wsgen -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jaxws-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>process-classes</phase>
						<goals>
							<goal>wsgen</goal>
						</goals>
						<configuration>
							<sei>de.treichels.webservice.Hello</sei>
							<genWsdl>true</genWsdl>
							<inlineSchemas>true</inlineSchemas>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- store wsdl as additional artifact in repository with type "wsdl" -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<artifact>
									<file>${project.build.directory}/generated-sources/wsdl/HelloService.wsdl</file>
									<type>wsdl</type>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>org.glassfish.metro</groupId>
			<artifactId>webservices-rt</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
	</dependencies>
</project>